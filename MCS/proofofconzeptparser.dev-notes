#####!#/#bin/#bash
# MCS+ Proof of Concept Parser - Needle Dateien lesen, strukturieren

needle_file="$1"
if [[ ! -f "$needle_file" ]]; then
  echo "Needle file fehlt oder nicht gefunden: $needle_file"
  exit 1
fi

declare -A needle_data
declare -a needles=()

current_key=""
current_value=""

while IFS= read -r line || [[ -n "$line" ]]; do
  # Leerzeile signalisiert Ende eines Needle-Blocks
  if [[ -z "$line" ]]; then
    # Speichern des aktuellen Needles in Array
    if [[ -n "${needle_data[mcs]}" ]]; then
      needles+=("$(declare -p needle_data)")
      # Reset für nächsten Block
      unset needle_data
      declare -A needle_data
    fi
    continue
  fi

  # Parsen Schlüssel: Wert
  if [[ "$line" =~ ^@mcs:\ (.+)$ ]]; then
    needle_data[mcs]="${BASH_REMATCH[1]}"
  elif [[ "$line" =~ ^FUNC:\ (.+)$ ]]; then
    needle_data[func]="${BASH_REMATCH[1]}"
  elif [[ "$line" =~ ^HEX:\ (.+)$ ]]; then
    needle_data[hex]="${BASH_REMATCH[1]}"
  elif [[ "$line" =~ ^BIN:\ (.+)$ ]]; then
    needle_data[bin]="${BASH_REMATCH[1]}"
  elif [[ "$line" =~ ^DESC:\ (.+)$ ]]; then
    needle_data[desc]="${BASH_REMATCH[1]}"
  fi
done < "$needle_file"

# Letztes Element sichern falls keine Leerzeile am Ende
if [[ -n "${needle_data[mcs]}" ]]; then
  needles+=("$(declare -p needle_data)")
fi

# Ausgabe zum Test
for n in "${needles[@]}"; do
  eval "$n"
  echo "Needle: mcs=${needle_data[mcs]}, func=${needle_data[func]}, hex=${needle_data[hex]}, bin=${needle_data[bin]}"
  echo "  Desc: ${needle_data[desc]}"
done
