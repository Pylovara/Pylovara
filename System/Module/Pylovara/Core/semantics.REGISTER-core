#!/usr/bin/env bash
# semantics.REGISTER.core
# Core-Einheit zur Verwaltung symbolischer Register und semantischer Steuerung
# Version: 0.1
# Autor: pylovara.ai

### Basisdaten: Strukturen (Input/Register/Formate)
register_structures=$(cat <<EOF
!LABEL:       definiert eine Bezeichnungsmarke
!TYPE:        erwartet einen Typbezeichner (z.B. INT, STR, BOOL)
!VAL:         definiert einen konkreten Wert
!PAIR:        definiert Schlüssel=Wert Paar
!PARAMS:      Liste parametrisierter Eingaben (kommagetrennt)
!REF:         Referenz auf eine andere Struktur oder Symbol
EOF
)

### Basisdaten: Steuerzeichen / Symbole
register_symbols=$(cat <<EOF
==>           logische Übergabe / Dispatcher-Auslöser
=>            symbolischer Vergleich / logischer Trigger
::            Bereich oder Sektor innerhalb eines Programmmoduls
::->          symbolischer Link in tieferes Modul / Node
::=           explizite Festsetzung eines Werts in Node-Kontext
//            Kommentarzeile / ignorieren
#             Meta-Command zur Steuerung oder Protokollierung
<+>           verbindendes Element zweier semantischer Einheiten
<[]>          Kontroll-Trigger oder Auswertungspunkte
EOF
)

# Debug-Modus (optional)
[[ $1 == "--show" ]] && {
  echo "== REGISTER STRUCTURES ==" && echo "$register_structures"
  echo "== REGISTER SYMBOLS ==" && echo "$register_symbols"
  exit 0
}

### Funktion: parst eine Zeile mit Symbolanalyse
parse_semantic_line() {
  local line="$1"

  # Ignoriere leere oder Kommentarzeilen
  [[ -z "$line" || "$line" =~ ^(\#|//) ]] && return

  # Prüfung auf Steuerzeichen
  if [[ "$line" =~ ^!([A-Z]+): ]]; then
    local key="${BASH_REMATCH[1]}"
    echo "[struct] $key -> ${line#*:}"
  elif [[ "$line" =~ (==>|=>|::->|::=|::|<\[\]>|<\+>) ]]; then
    echo "[symbolic] $line"
  else
    echo "[raw] $line"
  fi
}

### Funktion: verarbeitet ganze Datei oder Eingabestream
process_semantic_input() {
  local file="$1"
  while IFS= read -r line; do
    parse_semantic_line "$line"
  done < "${file:-/dev/stdin}"
}

### Einstiegspunkt
case "$1" in
  --parse)
    process_semantic_input "$2"
    ;;
  --registers)
    echo "$register_structures"
    ;;
  --symbols)
    echo "$register_symbols"
    ;;
  *)
    echo "[syntax] usage:"
    echo "  $0 --parse [file]"
    echo "  $0 --registers"
    echo "  $0 --symbols"
    echo "  $0 --show"
    ;;
esac
