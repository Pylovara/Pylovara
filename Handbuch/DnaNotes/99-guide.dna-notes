------------------------------------------------------------------------------------
@dna-nr: guide   ###############  Der Linux guide ##################################
------------------------------------------------------------------------------------
## Hauseigener  Universal SubShell Manager

dna lex = xx-<name>.dna-notes auflistung
dna lexi = XX-XX direkter griff per Nummer aus der Info
dna <cmd> = kurzbefehle

kommt noch :
dna <cmd> <pfad> = irgend einen aufruf oder massenhaftes cat und solche späße
dna <cmd> <pfad> <shell> <pfad> = z.b so scherze wie
--> dna copy /bla/bla/bla to /bla/bla/bla

------------------------------------------------------------------------------------
                   Linux Normal CMD GUIDE
------------------------------------------------------------------------------------
# ls Befehl

ls ist wahrscheinlich der erste Befehl, den jeder Linux-Benutzer in sein Terminal
eintippt. Mit ihm kannst du den Inhalt des gewünschten Verzeichnisses
(standardmäßig das aktuelle Verzeichnis) auflisten, einschließlich
der Dateien und anderer verschachtelter Verzeichnisse.

Es hat viele Optionen, deshalb ist es gut, wenn du dir mit dem --help Flag Hilfe
holst. Dieses Flag gibt alle Flags zurück, die du mit ls verwenden kannst.

Um die Ausgabe des ls-Befehls einzufärben, kannst du zum Beispiel Folgendes
verwenden:

ls --color=auto

Jetzt ist die Ausgabe des ls-Befehls eingefärbt, und du kannst den Unterschied
zwischen einem Verzeichnis und einer Datei erkennen.

Aber es wäre ineffizient, ls mit dem Farbflag einzugeben; deshalb verwenden wir den
Befehl alias.

------------------------------------------------------------------------------------
# alias-Befehl

Mit dem alias-Befehl kannst du temporäre Aliase in deiner Shell-Sitzung definieren.
Wenn du einen Alias erstellst, weist du deine Shell an, ein Wort durch eine Reihe
von Befehlen zu ersetzen.

Um zum Beispiel ls auf Farbe zu setzen, ohne jedes Mal das Flag --color einzugeben,
würdest du Folgendes verwenden

alias ls="ls --color=auto"

Wie du siehst, benötigt der alias-Befehl einen Parameter mit einem
Schlüssel-Wert-Paar: alias NAME="VALUE".Beachte, dass der Wert in Anführungszeichen
stehen muss.

Wenn du alle Aliase in deiner Shell-Sitzung auflisten willst, kannst du den
alias-Befehl auch ohne Argumente ausführen.

------------------------------------------------------------------------------------
# unalias-Befehl

Wie der Name schon sagt, zielt der Befehl unalias darauf ab, einen alias aus den
bereits definierten Aliasen zu entfernen. Um den vorherigen ls-Alias zu entfernen,
kannst du das verwenden:

unalias ls

------------------------------------------------------------------------------------
# pwd-Befehl

Der Befehl pwd steht für „print working directory“ und gibt den absoluten Pfad des
Verzeichnisses aus, in dem du dich befindest. Wenn dein Benutzername zum Beispiel
„john“ ist und du dich in deinem Dokumentenverzeichnis befindest, lautet
der absolute Pfad: /home/john/Documents.

Um es zu benutzen, gibst du einfach pwd in das Terminal ein:

pwd

------------------------------------------------------------------------------------
# cd-Befehl

Der cd-Befehl ist zusammen mit ls sehr beliebt. Er bedeutet „change directory“ und
wechselt, wie der Name schon sagt, in das Verzeichnis, auf das du gerade zugreifen
willst.

Wenn du dich zum Beispiel in deinem Dokumentenverzeichnis befindest und auf einen
Unterordner namens Videos zugreifen willst, kannst du ihn mit folgendem Befehl
aufrufen:

cd Videos

Du kannst auch den absoluten Pfad des Ordners angeben:

cd /home/kinsta/Documents/Videos

Es gibt einige Tricks mit dem cd-Befehl, mit denen du viel Zeit sparen kannst, wenn
du damit herumspielst:

Gehe in den Home-Ordner | Gehe eine Ebene höher | vorherige Verzeichnis
        cd                      cd..                   cd -

------------------------------------------------------------------------------------
# cp Befehl

Es ist so einfach, Dateien und Ordner direkt im Linux-Terminal zu kopieren, dass es
manchmal die herkömmlichen Dateimanager ersetzen kann.

Um den Befehl cp zu verwenden, gibst du ihn einfach zusammen mit der Quell- und
Zieldatei ein:

cp file_to_copy.txt new_file.txt

Du kannst auch ganze Verzeichnisse kopieren, indem du das Rekursiv-Flag verwendest:

cp -r dir_to_copy/ new_copy_dir/

Denke daran, dass Ordner unter Linux mit einem Schrägstrich (/) enden.

------------------------------------------------------------------------------------
# rm Befehl

Nachdem du nun weißt, wie du Dateien kopierst, ist es hilfreich zu wissen, wie du
sie wieder entfernst.

Du kannst den Befehl rm verwenden, um Dateien und Verzeichnisse zu löschen. Sei
dabei aber vorsichtig, denn es ist sehr schwierig (aber nicht unmöglich), auf
diese Weise gelöschte Dateien wiederherzustellen.

Um eine normale Datei zu löschen, gibst du ein:

rm file_to_copy.txt

Wenn du ein leeres Verzeichnis löschen willst, kannst du die rekursive (-r) Option
verwenden:

rm -r dir_to_remove/

Wenn du hingegen ein Verzeichnis mit Inhalt löschen willst, musst du die Flags
force (-f) und recursive verwenden:

rm -rf dir_with_content_to_remove/

Info :

Sei vorsichtig damit – du kannst einen ganzen Tag Arbeit auslöschen, wenn du diese
beiden Flags falsch einsetzt!

------------------------------------------------------------------------------------
# mv-Befehl

Mit dem Befehl mv kannst du Dateien und Verzeichnisse in deinem Dateisystem
verschieben (oder umbenennen).

Um diesen Befehl zu verwenden, gibst du seinen Namen zusammen mit der Quell- und
Zieldatei ein:

mv source_file destination_folder/

mv command_list.txt commands/

Um absolute Pfade zu verwenden, benutzt du:

mv /home/kinsta/BestMoviesOfAllTime ./

…wobei ./ das Verzeichnis ist, in dem du dich gerade befindest.

Du kannst mv auch verwenden, um Dateien umzubenennen, während sie im selben
Verzeichnis bleiben:

mv old_file.txt new_named_file.txt

------------------------------------------------------------------------------------
# mkdir Befehl

Um Ordner in der Shell zu erstellen, verwendest du den Befehl mkdir.
Du gibst einfach den Namen des neuen Ordners an, stellst sicher, dass er noch nicht
existiert, und schon kann es losgehen.

Um zum Beispiel ein Verzeichnis für deine Bilder zu erstellen, gibst du einfach ein:

mkdir images/

Um Unterverzeichnisse mit einem einfachen Befehl zu erstellen, verwende die Flagge
parent (-p):

mkdir -p movies/2004/

------------------------------------------------------------------------------------
# man-Befehl

Ein weiterer wichtiger Linux-Befehl ist man. Er zeigt die Handbuchseite eines jeden
anderen Befehls an (sofern er eine hat).

Um die Handbuchseite des Befehls mkdir zu sehen, gibst du ein:

man mkdir

Du kannst auch die man Handbuchseite nachschlagen:

man man

------------------------------------------------------------------------------------
# touch-Befehl

Mit dem Befehl touch kannst du die Zugriffs- und Änderungszeiten der angegebenen
Dateien aktualisieren.

Ein Beispiel: Ich habe eine alte Datei, die zuletzt am 12. April geändert wurde:
Listenbefehl, der die Änderungsdaten einer Gruppe von Dateien anzeigt.
Altes Datum.

Um das Änderungsdatum in die aktuelle Zeit zu ändern, müssen wir das Flag -m
verwenden:

touch -m old_file

Jetzt stimmt das Datum mit dem heutigen Datum überein (das zum Zeitpunkt des
Schreibens der 8. August war).
Listenbefehl mit neuem Datum.
Neues Datum

In den meisten Fällen wirst du touch jedoch nicht verwenden, um Dateidaten zu
ändern, sondern um neue leere Dateien zu erstellen:

touch new_file_name

------------------------------------------------------------------------------------
# chmod Befehl

Mit dem Befehl chmod kannst du den Modus einer Datei(Berechtigungen)schnell ändern.
Er bietet eine Vielzahl von Optionen.

Die grundlegenden Rechte, die eine Datei haben kann, sind:

    r (read)
    w (write)
    x (execute)

Einer der häufigsten Anwendungsfälle für chmod ist es, eine Datei für den Benutzer
ausführbar zu machen. Dazu gibst du chmod und das Flag +x ein, gefolgt von der Datei,
deren Berechtigungen du ändern möchtest:

chmod +x script

Damit machst du Skripte ausführbar, sodass du sie direkt mit der
Schreibweise ./ ausführen kannst.

------------------------------------------------------------------------------------
./ Befehl

Die Notation ./ ist zwar kein Befehl an sich, aber sie ist es wert, in dieser Liste
erwähnt zu werden. Es ermöglicht es deiner Shell, eine ausführbare Datei mit einem
beliebigen Interpreter, der in deinem System installiert ist, direkt im Terminal
auszuführen. Kein Doppelklick mehr auf eine Datei in einem grafischen Dateimanager!

Mit diesem Befehl kannst du zum Beispiel ein Python-Skript oder ein Programm, das
nur im .run-Format verfügbar ist, wie XAMPP, ausführen. Wenn du eine ausführbare
Datei ausführst, vergewissere dich, dass sie die Rechte für die Ausführung (x) hat,
die du mit dem Befehl chmod ändern kannst.

Hier ist ein einfaches Python-Skript und wie wir es mit der Notation ./ ausführen
würden:


#! /usr/bin/python3

# filename: script

for i in range(20):

print(f"This is a cool script {i}")

So wandeln wir das Skript in eine ausführbare Datei um und führen es aus:

chmod +x script

./script

------------------------------------------------------------------------------------
                        Wird Erweitert
------------------------------------------------------------------------------------




