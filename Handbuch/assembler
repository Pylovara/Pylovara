Ãœbersicht der x86-64-Register

Die x86-64-Architektur verfÃ¼gt Ã¼ber 16 allgemeine 64-Bit-Register:

    RAX: Akkumulator fÃ¼r arithmetische Operationen und RÃ¼ckgabewerte von Funktionen.

    RBX: Basisregister, oft fÃ¼r Datenzugriffe verwendet.

    RCX: ZÃ¤hlerregister, hÃ¤ufig fÃ¼r Schleifen und Funktionsaufrufe genutzt.

    RDX: Datenregister, dient oft als zweites Argument oder fÃ¼r Multiplikation/Division.

    RSI: Quellindex fÃ¼r Datenkopien.

    RDI: Zielindex fÃ¼r Datenkopien.

    RBP: Basiszeiger fÃ¼r den aktuellen Stack-Frame.

    RSP: Stackzeiger, zeigt auf die Spitze des Stacks.

    R8â€“R15: ZusÃ¤tzliche allgemeine Register.
    Brown University Computer Science

ðŸ“ž Aufrufkonventionen (Calling Conventions)
System V AMD64 ABI (Linux, macOS, BSD)

Diese Konvention wird in Unix-Ã¤hnlichen Systemen verwendet:

    Argumente: Die ersten sechs Ganzzahl- oder Zeigerargumente werden in den Registern %rdi, %rsi, %rdx, %rcx, %r8 und %r9 Ã¼bergeben. Weitere Argumente werden auf den Stack gelegt.

    RÃ¼ckgabewerte: Ergebnisse werden in %rax zurÃ¼ckgegeben.

    Callee-saved (nicht-volatile) Register: %rbx, %rbp, %r12â€“%r15 mÃ¼ssen vom aufgerufenen Funktion gesichert und wiederhergestellt werden.

    Caller-saved (volatile) Register: %rax, %rcx, %rdx, %rsi, %rdi, %r8â€“%r11 kÃ¶nnen vom aufgerufenen Funktion Ã¼berschrieben werden.
    6.s081.scripts.mit.edu+5cs61.seas.harvard.edu+5Brown University Computer Science+5
    Brown University Computer Science+1cs61.seas.harvard.edu+1

Microsoft x64 Calling Convention (Windows)

Diese Konvention wird in Windows-Systemen verwendet:

    Argumente: Die ersten vier Ganzzahl- oder Zeigerargumente werden in den Registern RCX, RDX, R8 und R9 Ã¼bergeben. Weitere Argumente werden auf den Stack gelegt.

    RÃ¼ckgabewerte: Ergebnisse werden in RAX zurÃ¼ckgegeben.

    Callee-saved (nicht-volatile) Register: RBX, RBP, RDI, RSI, R12â€“R15 mÃ¼ssen vom aufgerufenen Funktion gesichert und wiederhergestellt werden.

    Caller-saved (volatile) Register: RAX, RCX, RDX, R8â€“R11 kÃ¶nnen vom aufgerufenen Funktion Ã¼berschrieben werden.
    Brown University Computer Science+3Microsoft Learn+3ired.team+3
    Microsoft Learn+2Reddit+2Wikipedia+2
    Stack Overflow+1Wikipedia+1

ðŸ”§ Systemaufrufe (Syscalls) unter Linux

Bei direkten Systemaufrufen unter Linux werden die Argumente wie folgt in Registern Ã¼bergeben:

    Argumente: RDI, RSI, RDX, R10, R8, R9

    Systemaufrufnummer: RAX

    RÃ¼ckgabewert: RAX
    ired.team+2Reddit+2Wikipedia+2
    Microsoft Learn+1aaronbloomfield.github.io+1

Beachte, dass RCX und R11 durch den Systemaufruf zerstÃ¶rt werden kÃ¶nnen.




Ein Betriebssystem braucht:

    Zustandsverwaltung (Prozesse, Threads â†’ Stackframes, PCB etc.)

    Speicherverwaltung (Paging, MMU, virtuelle Adressen)

    I/O-Steuerung (Ã¼ber Interrupts, Ports, MMIO)

    Dateisystemlogik

    Scheduler + Kernel-Trap-Handler

    Kontextwechsel (â†’ genau hier werden Register gespeichert/restauriert!)

ZusÃ¤tzliche Register (nicht "allgemein")

Neben den 16 GPRs gibt es noch viele weitere, aber spezialisierte Register:
Kategorie	Beispiele
Segmentregister	CS, DS, ES, FS, GS, SS
Control Registers	CR0, CR2, CR3, CR4
Flags Register	RFLAGS
Instruction Pointer	RIP
Debugregister	DR0â€“DR7
Model-Specific Regs	IA32_* (z.â€¯B. IA32_SYSENTER_EIP)
FPU/MMX/XMM/YMM	XMM0â€“XMM15, YMM0â€“YMM15
Diese dienen der Architektursteuerung, FPU, SIMD, Exceptions, Paging usw.

Klarstellung:
Begriff	Was es ist	WofÃ¼r es da ist
Register (z.â€¯B. RAX)	Kleine, extrem schnelle SpeicherplÃ¤tze	Datenverarbeitung in der CPU
Assembler-Befehl	Instruktion wie mov, add, jmp etc.	Steuert, was die CPU tut
Maschinencode	BinÃ¤rcode wie 0x48 89 c8	Was die CPU tatsÃ¤chlich ausfÃ¼hrt
C-Code	HÃ¶here Abstraktion, z.â€¯B. int a = 5;	Wird vom Compiler in Assembler Ã¼bersetzt

Wie wird C zu Maschinencode?

Beispiel:

int a = 5;

Wird von gcc oder clang kompiliert zu:

mov     eax, 5

Das wird dann zu Maschinencode (x86-64 Binary):

b8 05 00 00 00

Was bedeutet: â€žSchreibe 5 in das Register EAX (untere 32 Bit von RAX)â€œ.