#############################################################
@wiki-nr: 07 ################################################
#############################################################
@wiki-nr: 07-01 #############################################
#############################################################

MCS-Beispiel 01 – 
„Steam Launcher mit Display-Logik und Fehlerprotokoll“

Ziel :
Ein Programm (hier: **Steam**) wird gestartet.
Dabei wird geprüft, ob ein Display im System (`eDip1`) 
im Vollbildmodus bereitsteht.
Wenn nicht → Fehlerbehandlung und Protokoll.

MCS-Code:
```mcs
¢| steam * exec
  »['exec'|{pfad|/usr/lib/steam/steam}|"$Q"]«
  ¶ »['eDip1'|fullscreen]«
  ¶¶ »['ſ'|{cash|reset}|{log|~/$User/SteamReportPylovara.notes}]«
|¢
```
#############################################################
Erklärung 

`¢| steam * exec`

* `¢|`: Start einer MCS-Sektion (Container).
* `steam`: Logischer Name der Operation.
* `* exec`: Operationstyp → hier ein **ausführbarer Prozess** (exec).

> → Signal: Starte ein logisches Modul namens „steam“, 
            das etwas *ausführen* soll.

`»['exec'|{pfad|/usr/lib/steam/steam}|"$Q"]«`

* `»['exec'|...]«`: Hauptruf – startet den eigentlichen Prozess.
* `{pfad|...}`: Angabe des Speicherorts.
* `"$Q"`: Placeholder für spätere Übergabeparameter oder leere Übergabe.

> → Führt den Steam-Binary aus. `$Q` steht für optionalen, 
    zur Laufzeit übergebbaren Input.

`¶ »['eDip1'|fullscreen]«`

* `¶`: **IF-Bedingung** – hier wird etwas geprüft.
* `»['eDip1'|fullscreen]«`: Teste, ob das Display-Modul `eDip1` 
    im fullscreen-Modus verfügbar ist.

> → Prüft, ob Steam im Vollbildmodus auf dem Display `eDip1` laufen kann.

`¶¶ »['ſ'|{cash|reset}|{log|~/$User/SteamReportPylovara.notes}]«`

* `¶¶`: ELSE-Zweig – wird nur ausgeführt, wenn die vorherige 
*  `¶`  -Bedingung fehlschlägt.
* `['ſ'|...]`: Aufruf des internen Service-Moduls `ſ` (z. B. „Systemflush“ oder „Systemlogik“).
* `{cash|reset}`: Befehl, um einen Caching-Zustand zurückzusetzen.
* `{log|~/$User/...}`: Pfad zur Protokolldatei für die Ausgabe.

> → Falls kein Vollbild möglich: Reset-Caches und logge den Fehler.

Struktur zusammengefasst
| Symbol  | Bedeutung                        |     |                            |
| ------- | -------------------------------- | --- | -------------------------- |
| \`¢     | ...                              | ¢\` | Codeblock (Modulcontainer) |
| `*`     | Art der Operation (exec, map...) |     |                            |
| `»...«` | Ausführung / Prüfung / Logik     |     |                            |
| `¶`     | IF-Zweig                         |     |                            |
| `¶¶`    | ELSE-Zweig                       |     |                            |

Modularer Nutzen
- Erweiterbar: Weitere `¶`- oder `§`-Zweige möglich
- Klarer Fehlerpfad: Saubere Trennung von Logik + Recovery
- Maschinennah: Keine Runtime-Parser-Logik nötig
- Einprägsam: Fast wie ein Mini-Assembler mit Klartext

@wiki-nr: 07-02 #############################################

Vergleich: Klassischer Python-Startpunkt vs. MCS-Mapping

Python-Originalcode:

```python
#!/usr/bin/python
# -*- coding: utf-8 -*-
import re
import sys
from speculum.main import main

if __name__ == "__main__":
    sys.argv[0] = re.sub(r"(-script\.pyw|\.exe)?$", "", sys.argv[0])
    sys.exit(main())
```

*Dieser Code lädt `re`, `sys`, entfernt ggf. Windows/Script-Endungen und startet die `main()`-Routine der `speculum.main`-Datei.*


MCS-Abbildung:

```mcs
¢| re sys * speculum.main
    »['import'|re|sys]«
    »['sys.argv'|0|$@argv0]«
    ¶ »['regex.sub'|"-script\.pyw|\.exe)?$"|""|$@argv0|$@argv0]«
    ¶ »['sys.exit'|main()]«
|¢
```

Erklärung MCS-Logik:
| Zeile              | Bedeutung                 |                                                      |                                  |
| ------------------ | ------------------------- | ---------------------------------------------------- | -------------------------------- |
| \`¢                | re sys \* speculum.main\` | Blockstart, nutzt `re`, `sys`, Ziel: `speculum.main` |                                  |
| \`»\['import'      | re                        | sys]«\`                                              | lädt Module                      |
| \`»\['sys.argv'    | 0                         | \$@argv0]«\`                                         | speichert `sys.argv[0]` temporär |
| \`¶ »\['regex.sub' | "..."]«\`                 | entfernt Endungen wie `-script.pyw`, `.exe`          |                                  |
| \`¶ »\['sys.exit'  | main()]«\`                | startet Main-Funktion & beendet Prozess              |                                  |


Kommentar:
Die MCS-Syntax bietet klare Modularität, lesbare semantische Blöcke 
und eine trennbare Logikarchitektur, die sich später verschachteln, 
ersetzen oder bedingt erweitern lässt – im Gegensatz zur linearen, 
oft "unsichtbaren" Verkettung in Python.

@wiki-nr: 07-02 #############################################

## 🧬 MCS als Brücken-Kernel – Der universelle Prozesseinstieg

Was ist MCS?
> **MCS** steht für Machine Code Speech – ein universelles, 
semantisches Steuersystem, das als Brückenkern (Bridge Kernel) 
zwischen Mensch und Maschine agiert.
Dabei ersetzt es klassische Shells, Skriptsprachen und sogar 
Low-Level-Kontrollsysteme, indem es alle Anweisungen in 
klar strukturierter, modularer Sprache ausdrückt – 
die sogenannte MCS-Syntax.

---

Wieso „Brücken-Kernel“?
* MCS dockt sich unterhalb der Shell an (wie ein Kernel-Sidecar).
* Es kann direkt mit Systemprozessen kommunizieren, egal ob:

  * 🐧 Linux (`/bin/sh`, `bash`, `dash`, `zsh`)
  * 🍎 macOS (`zsh`, `osascript`, etc.)
  * 🪟 Windows (`powershell`, `cmd`, `wsl`, etc.)

---

### 🧠 **Grundidee: Eine Sprache für alle Systeme**

```mcs
¢| bash powershell C * native
  »['compile'|{codeblock}|{arch|x86_64}]«
  ¶ »['run'|{pfad|/home/user/test.sh}]«
  ¶¶ »['catch'|{log|~/errors.mcsnote}]«
|¢
```

Diese Blockstruktur kann:
* Ein Shell-Skript ausführen,
* In C kompilieren,
* Einen Fehler abfangen,
* Und das mit einer Syntax – auf jedem OS.

Beispiel: Starte ein universelles Setup

```mcs
¢| system * installer
  »['scanOS'|{fallback|Linux}]«
  ¶ »['if'|{OS|Windows}|»['use'|powershell]«]«
  ¶ »['if'|{OS|Linux}|»['use'|bash]«]«
  ¶¶ »['exec'|{pfad|~/Pylovara/start-node.sh}]«
|¢
```

Ergebnis:
* Prüft automatisch das Betriebssystem
* Lädt den passenden Interpreter
* Startet den Einstiegspunkt in Pylovara

Das macht MCS besonders:
| Merkmal              | Nutzen                                                          |
| -------------------- | --------------------------------------------------------------- |
| 🧩 Modular           | Jeder Befehl kann einzeln ersetzt, geprüft, rekombiniert werden |
| 🧠 Lesbar            | Auch für Einsteiger verständlich                                |
| 🧬 System-agnostisch | Mac, Linux, Windows – eine Sprache                              |
| 🪢 Shell-frei        | Kein `#!/bin/bash` oder `.sh` nötig – MCS übernimmt             |
| 🔐 Sicher            | Kein Wildwuchs durch unklare Skriptpfade oder Abhängigkeiten    |

Wie funktioniert das technisch?
> MCS läuft **innerhalb Pylovara** als Subsystem, aber behandelt Shells wie Treiber.
> Es nutzt Parser und Wrapper, um Systemcalls umzuleiten. Das heißt:
>
> `run` in MCS ≠ direktes `execve`, sondern eine abstrahierte, kontrollierte Weitergabe
> MCS kann Fehler isoliert loggen oder Weiterleitungen dynamisch umbauen
> Jeder Block ist serialisierbar, prüfbar, wiederverwendbar


Integration ins System:
> Sobald MCS installiert ist (z. B. `/usr/lib/pylovara/mcs.bridge`), 
  kannst du deine Shell ignorieren – oder 
  MCS als dein neues Interface verwenden:

```bash
mcs run /etc/init.d/networking restart
```

… wird automatisch durch den passenden Interpreter geroutet und verarbeitet.


Beispiel : MCS-Startsequenz sieht dann so aus wie:

```mcs
¢| init * bootloader
  »['check'|{user|root}]«
  ¶ »['load'|{module|network.core}]«
  ¶ »['ping'|8.8.8.8|timeout=5]«
  ¶¶ »['log'|{result|~/bootinit.log}]«
|¢
```




